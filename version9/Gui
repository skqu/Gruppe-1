### Gui class in the class there control all the main graphics. And it contain the Calculator, because its only a "eval" method. 
# Othervise it should have its own class. The reason that the displayframes is in other class, is there I use Graphics and TKinter
# and Graphics together in the same class gave me issues. And the second reason is that I create those 3 (Display xml/csv/Json/)
# in different time. (learning proces) The Gui and Calculator were our base code that created by Nickolaj. I change and add 
# little in the class. Add the radio button for xml, csv and json display data. The result in list form is display in terminal
# ###

import tkinter as tk
from tkinter import ttk
from Handler import Handler
from JsonFileManager import JsonFileManager
from DisplayFrameJson  import DisplayFrameJson
from CsvDisplayHandler import CsvDisplayHandler


class Gui():
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Calculator")
        self.handler = Handler(JsonFileManager())  # Assuming Handler and JsonFileManager classes are in separate files
        self.buildLayout()
        self.style()
        self.root.mainloop()
        self.file_type_var = tk.StringVar()
    
    
    
    def buildLayout(self):

        # DISPLAY

        self.display = tk.Label(self.root, text="0", font=("Arial", 32), anchor="e", justify="right", width=12)
        self.display.pack(padx=10, pady=10)
        self.display.focus_set()

        # Frame for numbers and operators
        self.numpad_frame = tk.Frame(self.root)
        self.numpad_frame.pack()

        
        
        
        #Numpad
        self.list_buttons = [
            "(", ")", "C", "\u2190",
            "\u221A", "x^2", "x^x", "/",
            "7", "8", "9", "*",
            "4", "5", "6", "-",
            "1", "2", "3", "+",
            "+/-", "0", ".", "="
        ]
        
        self.buildButtons(self.list_buttons, self.numpad_frame, 4) 
        
        # Variable to store the chosen file type
        self.file_type_var = tk.StringVar()
        self.file_type_var.set("xml")  # Default selection

        # File types available for selection
        file_types = ["json", "xml", "csv"]
        
        for file_type in file_types:
            tk.Radiobutton(
                self.root,
                text=file_type.upper(),
                variable=self.file_type_var,
                value=file_type,
                command=self.on_file_type_change
            ).pack(side=tk.LEFT)
        

            print("T0")
 
    def on_file_type_change(self):
        
        selected_file_type = self.file_type_var.get()
        print(f"Selected file type: {selected_file_type}")
        
        if selected_file_type == "json":
            #from display_frame_json 
            import DisplayFrameJson
            print("T1")
            display_frame = DisplayFrameJson()
            display_frame.display_data()

        elif selected_file_type == "xml":  
            #from FileDisplayHandlerXML 
            from FileDisplayHandlerXml import FileDisplayHandlerXML
            print("T2")
            app = FileDisplayHandlerXML()  
            app.load_file("XMLresults.xml")

        elif selected_file_type == "csv":
            from CsvDisplayHandler import CsvDisplayHandler
            print("T3")
            csv_display_handler = CsvDisplayHandler()
            csv_display_handler.run()

    def calculate(self, expression):
        try:
            result = eval(expression)  # Use eval to calculate the result of the expression
            return result
        except Exception as e:
            print(f"Error in calculation: {e}")
            return "Error"



    def buildButtons(self, list_buttons, frame, maxCol = 1): #Create buttons for a frame 
        row = 0
        col = 0

        for button_text in list_buttons:
            button = tk.Button(frame, text=button_text, font=("Arial", 16), width=6, height=2, borderwidth=0)
            button.grid(row=row, column=col, padx=2, pady=2)
            button.bind("<Button-1>", self.events)
            col += 1
            if col == maxCol:
                col = 0
                row += 1
    
    def displayText(self, text):
        if len(str(self.display.cget("text"))) == 0:
            newText = 0
        else:
            if str(self.display.cget("text")) == "0":
                newText = text
            else:
                newText = str(self.display.cget("text")) + text
        self.display.config(text=newText)
    

    def events(self, event): #Button events
        newText = ""
        text = event.widget.cget("text")
        self.display.focus_set()
        
        

        match text:
            case "=":
                new = self.display.cget("text").replace('\u221A', 'sqrt')
                new = new.replace('^', '**')

                newText = self.calculate(new)
                self.display.config(text = newText)
                #print("testA",newText, new)
                self.handler.save_result(newText, new)
                self.handler.display_results()
              
            case "C":
                self.display.config(text = "0")
                

            case "\u2190": #Backspace

                newText = self.display.cget("text")[:-1]
                self.display.config(text = newText)
                if len(self.display.cget("text")) == 0:
                    self.display.config(text = "0")
                   
            case "+/-":
                if self.display.cget("text")[0] != "-":
                    newText = "-" + self.display.cget("text")
                    
                else:
                    newText = self.display.cget("text")[1:]
                    

                self.display.config(text = newText)
                
            case "\u221A": #Squareroot
                newText = text + "("
                self.displayText(newText)
               
            
            case "x^2": 
                newText = "^2"
                self.displayText(newText)
                

            case "x^x":
                print("SAdasdsdsd")
                newText = "^"
                self.displayText(newText)
                
            
            case _:
                newText = text
                self.displayText(newText)
    
  
    def styleChildren(self, widget, bg_color, text_color):
        widget.configure(bg=bg_color)
        if isinstance(widget, (tk.Label, tk.Button)):
            widget.configure(fg=text_color)
        if isinstance(widget, tk.Frame):
            for child in widget.winfo_children():
                self.styleChildren(child, bg_color, text_color)
                    

    def style(self):

        backgroundColor = "#262626"
        fontColor = "#ffffff"

        self.styleChildren(self.numpad_frame, "#3d3d3d", fontColor)

        self.root.config(background = backgroundColor)
        self.display.config(background = backgroundColor)
        self.numpad_frame.config(background = backgroundColor)
        self.display.config(fg = fontColor)
        
        
if __name__ == "__main__":
    gui = Gui()
